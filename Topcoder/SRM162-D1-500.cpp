/*
	editorial: http://www.topcoder.com/tc?module=Static&d1=match_editorials&d2=srm162
*/


#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class JarBox {
public:
	int numJars(int radius, int woodlength);
};

double perimeter, r;
double sqr3;

bool fit(int rows, int jars){
	double h = 2 * r + (rows - 1)*sqr3*r;
	int w = 2 * r*jars;
	return 2 * w + 2 * h <= perimeter;
}

int mxJars(int rows, int jars){
	double h = 2 * r + (rows - 1)*sqr3*r;
	int w = 2 * r*jars + r;
	if (2 * w + 2 * h <= perimeter) return rows * jars;
	return (rows + 1) / 2 * jars + rows / 2 * (jars - 1);
}

int JarBox::numJars(int radius, int woodlength) {
	r = radius, perimeter = woodlength;
	sqr3 = sqrt(3.);
	int ret = 0;
	for (int ro = 1; fit(ro, 1); ro++) for (int jars = 1; fit(ro, jars); jars++)
		ret = max(ret, mxJars(ro, jars));
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	JarBox *obj;
	int answer;
	obj = new JarBox();
	clock_t startTime = clock();
	answer = obj->numJars(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = 1;
		p1 = 8;
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 1;
		p1 = 16;
		p2 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 1;
		p1 = 18;
		p2 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 1;
		p1 = 45;
		p2 = 32;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 6;
		p1 = 1269;
		p2 = 784;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
