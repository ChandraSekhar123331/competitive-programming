/*
	hint: number of pig's is just 15, we can use dp of 2^15


	notice that we can repesent each state with a mask

	not try all possible placment for cuurent pig and after placing him place the next and the so on

	and find position with maximum time before 2 pigs surronds it
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Piglets {
public:
	int choose(string trough);
};

int dp[(1 << 16)];
int n;

bool sand(int msk, int i){// check if two adjacent pig's nxt to i
	if (i == 0 || i + 1 == n) return 0;
	int i1 = i - 1, i2 = i + 1;
	if ((msk&(1 << i1) && (msk&(1 << i2)))) return 1;
	return 0;
}

int rec(int msk){
	int &ret = dp[msk];
	if (ret != -1) return ret;
	ret = n + 1;
	int steps = -1;
	for (int i = 0; i < n; i++) if (!(msk&(1 << i))){ // try all positions
		int cur = 0;
		int tmsk = msk | (1 << i); // we already placed him in i'th position
		while (tmsk + 1 != (1 << n) && !sand(tmsk, i)){// try placing nxt pig in optimal place considereing we placed i-th
			cur++;
			tmsk = tmsk | (1 << rec(tmsk));
		}
		if (!sand(tmsk, i)) cur = n + 1;
		if (cur > steps){
			steps = cur;
			ret = i;
		}
	}
	return ret;
}

int Piglets::choose(string trough) {
	if (trough[0] == '-') return 0;
	n = trough.size();
	if (count(trough.begin(), trough.end(), 'p') == n) return -1;
	for (int i = 0; i < (1 << (n + 1)); i++) dp[i] = -1;
	int msk = 0;
	for (int i = 0; i < n; i++) if (trough[i] == 'p')
		msk |= (1 << i);
	puts("");
	return rec(msk);
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Piglets *obj;
	int answer;
	obj = new Piglets();
	clock_t startTime = clock();
	answer = obj->choose(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;

	{
		// ----- test 0 -----
		p0 = "p---p------p---";
		p1 = 14;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "p-p-p";
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "p--p";
		p1 = 1;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "p---p";
		p1 = 2;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = "ppp";
		p1 = -1;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = "p----p";
		p1 = 3;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
