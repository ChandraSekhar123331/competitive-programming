#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
typedef long long ll;

class PrimeAnagrams {
public:
	vector <int> primes(string anagram);
};

bool notPrime[8000500];
int prCnt;
string di;

vector<int> ret, a[3], pa[3], ta[3];
int ans;

void rec(int idx){
	if (idx == di.size()){
		for (int i = 0; i < 3; i++) if (a[i].empty()) return;
		for (int i = 0; i < 3; i++) pa[i].clear(), ta[i] = a[i];
		for (int i = 0; i < 3; i++){
			sort(a[i].begin(), a[i].end());
			do{
				if (a[i][0] == 0) continue;
				int cur = 0;
				for (int d : a[i]) cur = cur * 10 + d;
				if (!notPrime[cur]) pa[i].push_back(cur);
			} while (next_permutation(a[i].begin(), a[i].end()));
		}
		for (int i1 : pa[0]) for (int j : pa[1]) for (int k : pa[2]) {
			if (ans == -1 || i1*j*k < ans){
				ans = i1*j*k;
				ret.clear();
				ret.push_back(i1); ret.push_back(j); ret.push_back(k);
			}
		}
		for (int i = 0; i < 3; i++) a[i] = ta[i];
		return;
	}
	for (int i = 0; i < 3; i++){
		a[i].push_back(di[idx] - '0');
		rec(idx + 1);
		a[i].pop_back();
	}
	return;
}



vector <int> PrimeAnagrams::primes(string anagram) {
	for (int i = 0; i < 8000500; i++) notPrime[i] = 0;
	notPrime[1] = 1;
	prCnt = 0;
	for (ll i = 2; i < 8000500; i++) if(!notPrime[i]) {
		for (ll j = i*i; j < 8000500; j += i) notPrime[j] = 1;
	}
	di = anagram;
	ret.clear();
	for (int i = 0; i < 3; i++) a[i].clear();
	ans = -1;
	rec(0);
	sort(ret.begin(), ret.end());
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	PrimeAnagrams *obj;
	vector <int> answer;
	obj = new PrimeAnagrams();
	clock_t startTime = clock();
	answer = obj->primes(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	p0 = "39151";
	int t1[] = {5,13,19};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "921179";
	int t1[] = {2,17,199};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "01123";
	int t1[] = {2,3,101};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "0707070";
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "222";
	int t1[] = {2,2,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "123";
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "82749847";
	all_right = KawigiEdit_RunTest(6, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
