#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class DirectoryTree {
public:
	vector <string> display(vector <string> files);
};



struct Node{
	string st;
	map<string, int> nxt;
	Node(string s = ""){
		st = s;
		nxt.clear();
	}
} trie[100500];
int nodes;

void add(vector<string> &path){
	int idx = 0;
	for (int i = 0; i < path.size(); i++){
		if (trie[idx].nxt.find(path[i]) == trie[idx].nxt.end()){
			trie[++nodes] = Node(path[i]);
			trie[idx].nxt[path[i]] = nodes;
		}
		idx = trie[idx].nxt[path[i]];
	}
}

vector<string> dfs(int u){
	vector<string> ret;
	if (u){
		ret.push_back("+-" + trie[u].st);
	}
	else ret.push_back(trie[u].st);
	int n = trie[u].nxt.size(), i = 0;
	for(auto v:trie[u].nxt){
		vector<string> t = dfs(v.second);
		string add;
		if (i + 1 == n) add = "  ";
		else add = "| ";
		for (int i = 1; i < t.size(); i++) t[i] = add + t[i];
		for (auto s : t)
			ret.push_back(s);
		i++;
	}
	return ret;
}

vector <string> DirectoryTree::display(vector <string> files) {
	nodes = 0;
	vector<string> v; string tv;
	trie[0].st = "ROOT";
	add(v);
	for (auto s : files){
		for(char &c:s) if (c == '/') c = ' ';
		istringstream iss(s);
		v.clear(); tv.clear();
		while (iss >> tv) v.push_back(tv);
		add(v);
	}
	vector<string> ret;
	vector<string> t = dfs(0);
	for (auto s : t) ret.push_back(s);
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DirectoryTree *obj;
	vector <string> answer;
	obj = new DirectoryTree();
	clock_t startTime = clock();
	answer = obj->display(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"/usr/lib/libc","/usr/bin/find","/home/schveiguy/bashrc","/usr/bin/bash","/usr/local/bin/ssh"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ROOT","+-home","| +-schveiguy","|   +-bashrc","+-usr","  +-bin","  | +-bash","  | +-find","  +-lib","  | +-libc","  +-local","    +-bin","      +-ssh"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"/dir/dir/file","/dir/file","/file","/dir/sharedname/dir","/dir/dir/sharedname"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ROOT","+-dir","| +-dir","| | +-file","| | +-sharedname","| +-file","| +-sharedname","|   +-dir","+-file"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"/a/a/a/a/a/a/a","/a/b/a/a/a/a/a","/a/a/a/a/b/a/a"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ROOT","+-a","  +-a","  | +-a","  |   +-a","  |     +-a","  |     | +-a","  |     |   +-a","  |     +-b","  |       +-a","  |         +-a","  +-b","    +-a","      +-a","        +-a","          +-a","            +-a"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
