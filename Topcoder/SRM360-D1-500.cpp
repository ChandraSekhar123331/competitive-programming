#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <bits/stdc++.h>

using namespace std;


class PrinceOfPersia {
public:
	int minObstacles(vector <string> maze);
};

const int maxn = 1000500;

int head[maxn], d[maxn], record[maxn], prv[maxn];

struct Node{
	int u, v, c;
	int nxt;
} edge[maxn];
int e;

void addEdge(int u, int v, int c){
	edge[e].u = u, edge[e].v = v, edge[e].c = c;
	edge[e].nxt = head[u], head[u] = e++;
	edge[e].u = v, edge[e].v = u, edge[e].c = 0;
	edge[e].nxt = head[v], head[v] = e++;
}

int maxFlow(int s, int t){
	int flow = 0;
	while (true){
		memset(d, 0, sizeof(d));
		d[s] = -12345678;
		queue<int> q;	 q.push(s);
		while (!q.empty()){
			int u = q.front();	 q.pop();
			if (u == t) break;
			for (int i = head[u]; i != -1; i = edge[i].nxt) if (edge[i].c > 0 && d[edge[i].v] == 0){
				q.push(edge[i].v);
				d[edge[i].v] = min(d[u], edge[i].c);
				prv[edge[i].v] = u, record[edge[i].v] = i;
			}
		}
		if (d[t] == 0) break;
		for (int x = t; x != s; x = prv[x]){
			int ed = record[x];
			edge[ed].c--;
			edge[ed ^ 1].c++;
		}
		flow++;
	}
	return flow;
}

int dx[] = { 1, -1, 0, 0 },
dy[] = { 0, 0, 1, -1 };

int PrinceOfPersia::minObstacles(vector <string> maze) {
	memset(head, -1, sizeof(head));
	e = 0;
	int n = maze.size(), m = maze[0].size();
	int s = 0, t = 2 * n*m + 1;
	bool firstP = true;
	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) {
		int nodeIN = i*m + j + 1, nodeOUT = i*m + j + 1 + n*m;
		if (maze[i][j] != '#'){
			addEdge(nodeIN, nodeOUT, 1);
			if (maze[i][j] == 'P') {
				if (firstP) addEdge(s, nodeOUT, 123456789), firstP = false;
				else addEdge(nodeIN, t, 123456789);
			}
		}
		for (int k = 0; k < 4; k++){
			int ni = i + dx[k], nj = j + dy[k];
			if (ni < 0 || nj < 0 || ni >= n || nj >= m) continue;
			if (maze[ni][nj] == 'P' && maze[i][j] == 'P') return -1;
			addEdge(nodeOUT, ni*m + nj + 1, 123456789);
		}
	}
	return maxFlow(s, t);
}

















// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PrinceOfPersia *obj;
	int answer;
	obj = new PrinceOfPersia();
	clock_t startTime = clock();
	answer = obj->minObstacles(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
		// ----- test 0 -----
		string t0[] = { "P....", "...##", "##...", "....P" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { ".....", ".P.P.", "....." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 3;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { ".#P.", ".P#." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "####", "#PP#", "####" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = -1;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
