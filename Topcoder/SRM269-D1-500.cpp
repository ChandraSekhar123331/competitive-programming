#include<bits/stdc++.h>
using namespace std;

const double EPS = 1e-11;

class SecurityBunker {
public:
	double chooseBomb(vector <string> field);
};

const int maxn = 2800;

int bx[maxn], by[maxn], bn;
int ox[maxn], oy[maxn], on;

bool visb[maxn];

double bbd[150][150], bod[150][150];

double di(double dx, double dy){
	return sqrt(dx*dx + dy*dy);
}



bool can(double d){
	for (int i = 0; i < bn; i++){
		memset(visb, 0, sizeof(visb));
		queue<int> q; q.push(i);
		visb[i] = 1;
		while (!q.empty()){
			int u = q.front(); q.pop();
			for (int j = 0; j < bn; j++) if (!visb[j] && bbd[u][j] < d + EPS)
				q.push(j), visb[j] = 1;
		}
		int ret = 0;
		for (int j = 0; j < on; j++){
			bool f = 0;
			for (int k = 0; k < bn; k++) if (visb[k] && bod[k][j] < d + EPS){
				f = 1;
				break;
			}
			ret += f;
		}
		if (ret != on) return 0;
	}
	return 1;
}

double SecurityBunker::chooseBomb(vector <string> field) {
	bn = on = 0;
	int n = field.size(), m = field[0].size();
	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) {
		if (field[i][j] == '*') bx[bn] = i, by[bn] = j, bn++;
		if (field[i][j] == '?') ox[on] = i, oy[on] = j, on++;
	}
	for (int i = 0; i < bn; i++) for (int j = 0; j < bn; j++)
		bbd[i][j] = di(bx[i] - bx[j], by[i] - by[j]);
	for (int i = 0; i < bn; i++) for (int j = 0; j < on; j++)
		bod[i][j] = di(bx[i] - ox[j], by[i] - oy[j]);
	double l = 0., r = 123456789.;
	for (int it = 0; it < 500; it++){
		double mid = (l + r) / 2.;
		if (can(mid)) r = mid;
		else l = mid;
	}
	return l;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SecurityBunker *obj;
	double answer;
	obj = new SecurityBunker();
	clock_t startTime = clock();
	answer = obj->chooseBomb(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	double p1;

	{
		// ----- test 0 -----
		string t0[] = { "*.*", ".?.", "*.*" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1.4142135623730951;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "*****", ".?.?.", "..?..", ".?.?.", "*****" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 3.0;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "*****", "....*", "....*", ".?..*", "....*", "*...*", "*****" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2.23606797749979;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "*.*.*.*", ".?.?.?." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2.0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "?*..*?....?", "...........", "....*......", "...?.......", ".*....**?..", "*......?...", ".......*...", ".......?.*.", "..*.......*", "?........?.", "......?*?.." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 5.0;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = { "?.?.*...?.?", ".*........?", "*....*.*...", "......?....", "...........", "....?......", "?..........", "?........*.", ".*.....**..", "...........", "....?.?...." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6.;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
