#include<bits/stdc++.h>
using namespace std;


class PalindromizationDiv1 {
public:
	int getMinimumCost(string word, vector <string> operations);
};

#define mx 123456789

string wo;
int sh[55][55], mc[55][55];

int dp[55][55];

int rec(int i, int j){
	if (j - i < 1) return 0;
	int &ret = dp[i][j];
	if (ret != -1) return ret;
	ret = rec(i + 1, j - 1) + mc[wo[i] - 'a'][wo[j] - 'a'];
	ret = min(ret, rec(i, j - 1) + mc[wo[j] - 'a'][26]);
	ret = min(ret, rec(i + 1, j) + mc[wo[i] - 'a'][26]);
	return ret;
}


int PalindromizationDiv1::getMinimumCost(string word, vector <string> operations) {
	wo = word;
	for (int i = 0; i < 27; i++) for (int j = 0; j < 27; j++)
		sh[i][j] = mc[i][j] = mx;
	for (int i = 0; i < 27; i++)
		sh[i][i] = 0;
	char c1, c2;
	string st;
	int x;
	for (auto s : operations){
		istringstream iss(s);
		iss >> st >> c1;
		if (s[0] == 'e'){
			iss >> x;
			sh[c1 - 'a'][26] = x;
		}
		else if (s[0] == 'a'){
			iss >> x;
			sh[26][c1 - 'a'] = x;
		}
		else{
			iss >> c2 >> x;
			sh[c1 - 'a'][c2 - 'a'] = x;
		}
	}
	for (int k = 0; k < 27; k++) for (int i = 0; i < 27; i++) for (int j = 0; j < 27; j++)
		sh[i][j] = min(sh[i][j], sh[i][k] + sh[k][j]);
	for (int i = 0; i < 27; i++) for (int j = 0; j < 27; j++) for (int k = 0; k < 27; k++)
		mc[i][j] = min(mc[i][j], sh[i][k] + sh[j][k]);
	memset(dp, -1, sizeof dp);
	int ret = rec(0, word.size() - 1);
	return ret >= mx ? -1 : ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PalindromizationDiv1 *obj;
	int answer;
	obj = new PalindromizationDiv1();
	clock_t startTime = clock();
	answer = obj->getMinimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	vector <string> p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = "racecar";
		p1.clear() /*{}*/;
		p2 = 0;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "topcoder";
		string t1[] = { "erase t 1", "erase o 1", "erase p 1", "erase c 1", "erase d 1", "erase e 1", "erase r 1" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 5;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "topcoder";
		string t1[] = { "erase t 10", "erase o 1", "erase p 1", "erase c 1", "erase d 1", "erase e 1", "erase r 1" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 7;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "caaaaaab";
		string t1[] = { "change b a 100000", "change c a 100000", "change c d 50000", "change b e 50000", "erase d 50000", "erase e 49999" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 199999;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = "moon";
		string t1[] = { "erase o 5", "add u 7", "change d p 3", "change m s 12", "change n d 6", "change s l 1" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = -1;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
