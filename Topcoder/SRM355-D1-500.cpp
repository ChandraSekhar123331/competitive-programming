/*
Exaplantion Image: https://drive.google.com/open?id=0BzgibPXBVUzjYTdRRlJGTkhjT0k
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const double EPS = 1e-8;

class Tetrahedron {
public:
	string exists(vector <string> d);
};

int d[5][5];

double di(double x1, double y1, double x2, double y2){
	double dx = x2 - x1, dy = y2 - y1;
	return sqrt(dx*dx + dy*dy);
}

string Tetrahedron::exists(vector <string> ds) {
	for (int i = 0; i < 4; i++)
		sscanf(ds[i].c_str(), "%d%d%d%d", &d[i][0], &d[i][1], &d[i][2], &d[i][3]);
	int AB = d[0][1], AC = d[0][2], AD = d[0][3];
	int BC = d[1][2], BD = d[1][3];
	double CD = d[2][3];
	double Cx = AC * ((AC*AC + AB*AB - BC*BC) / (2.*AC*AB));
	double Cy = sqrt(AC*AC - Cx*Cx);
	double Dx = AD * ((AD*AD + AB*AB - BD*BD) / (2.*AD*AB));
	double Dy = sqrt(AD*AD - Dx*Dx);
	double mxCD = di(Cx, Cy, Dx, -Dy), miCD = di(Cx, Cy, Dx, Dy);
	return (mxCD + EPS > CD && miCD - EPS < CD) ? "YES" : "NO";
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Tetrahedron *obj;
	string answer;
	obj = new Tetrahedron();
	clock_t startTime = clock();
	answer = obj->exists(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	string p1;

	{
		// ----- test 0 -----
		string t0[] = { "0 1 1 1", "1 0 1 1", "1 1 0 1", "1 1 1 0" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "YES";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "0 1 2 3", "1 0 1 2", "2 1 0 1", "3 2 1 0" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "YES";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "0 1 2 4", "1 0 1 2", "2 1 0 1", "4 2 1 0" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "NO";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "0 6 6 3", "6 0 4 5", "6 4 0 4", "3 5 4 0" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "YES";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "0 6 6 2", "6 0 4 5", "6 4 0 4", "2 5 4 0" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "NO";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
