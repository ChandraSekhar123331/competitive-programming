#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MonkeyTreeDistance {
public:
	string minimalMaximumDistance(vector <int> x, vector <int> y);
};

typedef long long ll;

string MonkeyTreeDistance::minimalMaximumDistance(vector <int> _x, vector <int> _y) {
	set<int > x;
	int n = _x.size();
	for (int i = 0; i < n; i++){
		x.insert(_y[i]);
		for (int j = i + 1; j < n; j++)
			x.insert((_y[i] + _y[j]) / 2), x.insert((_y[i] + _y[j] + 1) / 2);
	}
	vector<int> xs(x.begin(), x.end());
	ll ret = 1000000000000000000LL;
	for (int hx : xs){
		ll mx = -1;
		for (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++){
			if (_x[i] == _x[j]) mx = max(mx, (ll)abs(_y[i] - _y[j]));
			else mx = max(mx, (ll)abs(_y[i] - hx) + abs(_y[j] - hx) + abs(_x[i] - _x[j]));
		}
		ret = min(ret, mx);
	}
	return to_string(ret);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MonkeyTreeDistance *obj;
	string answer;
	obj = new MonkeyTreeDistance();
	clock_t startTime = clock();
	answer = obj->minimalMaximumDistance(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	string p2;

	{
		// ----- test 0 -----
		int t0[] = { 1, 4, 1 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 4, 1, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = "6";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { -1, -2, -1, 0, 2 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { -1, 3, -3, 0, 3 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = "9";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 1, 1, 1, 1 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 10, 100, 1000 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = "999";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 804289383, -153069114, 681692777, 714636915, 957747793, -575761665, -280114614, 649760492, -403483351, 189641421, 25202362, 350490027, -216631310, 102520059, -955102238, 967513926, 365180540, 540383426, -695910828, 303455736, -964994789, -478404632, -705297433, 726956429, -663534218, -138978470, -721277138, -766334877, -854825934, -531296865, 101513929, 801979802, 315634022, -364276942, 369133069, 125898167, 59961393, -910981545, -371824989, 656478042, 131176229, 653377373, -140515579, 914544919, -391586216, -243101463, 734575198, 973594324, -850201685, -961335631 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 129566413, -815196474, -587223909, 424268980, 911759956, -250758127, -862193138, -957000830, -17093004, -864502719, -488297695, -915579076, 937477084, 827336327, -427339664, 159126505, -194249154, 632621729, 100661313, 433925857, 141616124, -915646105, -60180418, -998899456, 998898814, 548233367, -389484566, 585990364, 374344043, -239686250, 477171087, -643573192, -54882724, 889947178, 780695788, -290606416, -508294597, 918502651, -247607246, 474612399, -946000069, 264095060, 411549676, 843993368, -56052261, 984210012, -144363774, 749698586, 469348094, 956297539 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = "3643489055";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
