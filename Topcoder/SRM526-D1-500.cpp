/*
	first: the standard dp is: F(N,2)
	and each player try to make his move 
	also first generate all prime list to reduce time
	but this O(N*K)

	now if tried to write this dp bottom up
	we will notice that dp[n][] only depnds on values in range [dp[n-k][],dp[n-1][]]
	and dp[n][] if win will choose minimum in that range, or maxmimum if lose
	but we need to keep also inf. about whether dp[n][] is prime or composite, positive or negative
	so we make 4 set's for each one of them
	and in each player turn make the appricate decision, see code for details.
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
typedef pair<int, int> pii;

class PrimeCompositeGame {
public:
	int theOutcome(int N, int K);
};

int c[474748];

int dp[474748][2];

int fmi(set<pii> &s, int va){
	// given a set<pii> find minimum value with second value >= va
	while (!s.empty()){
		auto it = s.begin();
		if (it->second < va) s.erase(it);
		else return it->first;
	}
	return 0;
}

int fmx(set<pii> &s, int va){
	// given a set<pii> find maxmimum value with second value >= va
	while (!s.empty()){
		auto it = s.rbegin();
		if (it->second < va) s.erase(s.lower_bound(*it));
		else return it->first;
	}
	return 0;
}

int PrimeCompositeGame::theOutcome(int N, int K) {
	//c[i] == 1 if number if composite, 0 if prime
	for (int i = 2; i <= N; i++) if (!c[i]) {
		for (int j = i * 2; j <= N; j += i){
			if (c[j] == 0){
				c[j] = 1;
			}
		}
	}
	set<pii> pp[2], pn[2], cp[2], cn[2];
	for (int n = 1; n <= N; n++){
		// for number n, alternate players
		for (int pl = 0; pl < 2; pl++){
			int cur = 0;
			if (pl == 0){
				// player 0 first try to win and choose minimum steps to win
				cur = fmi(pp[!pl], n - K);
				// if he can't win then he try to find maximum number of steps
				// because losing is stored in negative values, querying minimum, will give maximum
				if (!cur) cur = fmi(pn[!pl], n - K);
			}
			else{
				// player 1 first try to win and choose minimum steps to win
				// because losing is stored in negative values, querying maximum, will give minimum
				cur = fmx(cn[!pl], n - K);
				// if he can't win then he try to find maximum number of steps
				if (!cur) cur = fmx(cp[!pl], n - K);
			}
			// base case as i can't win or lose, for player0 -1 indicates he lost
			// player1, 1 indicates he lost
			if (cur == 0) dp[n][pl] = (pl == 0 ? -1 : 1);
			//else we add one more step, but handle negative steps with -1
			else dp[n][pl] = (cur < 0 ? cur - 1 : cur + 1);
			if (n != 1){
				// now we add dp[n] that we already computed
				// depedning whether it's prime or composite
				if (c[n]){
					if (dp[n][pl] < 0) cn[pl].insert({ dp[n][pl], n });
					else cp[pl].insert({ dp[n][pl], n });
				}
				else{
					if (dp[n][pl] < 0) pn[pl].insert({ dp[n][pl], n });
					else pp[pl].insert({ dp[n][pl], n });
				}
			}
		}
	}
	// we made the base case = 1, so we need to subtract one, with handling negative steps
	return dp[N][0] > 0 ? dp[N][0] - 1 : dp[N][0] + 1;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PrimeCompositeGame *obj;
	int answer;
	obj = new PrimeCompositeGame();
	clock_t startTime = clock();
	answer = obj->theOutcome(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = 474747;
		p1 = 474747;
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 58;
		p1 = 1;
		p2 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 30;
		p1 = 3;
		p2 = -2;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 6;
		p1 = 3;
		p2 = 1;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 526;
		p1 = 58;
		p2 = 19;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
