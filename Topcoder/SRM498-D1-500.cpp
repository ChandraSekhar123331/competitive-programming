#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int mod = 1000000009;

class FoxStones {
public:
	int getCount(int N, int M, vector <int> sx, vector <int> sy);
};
typedef long long ll;

map<vector<int>, int> cnt;
ll f[50500];


int FoxStones::getCount(int N, int M, vector <int> sx, vector <int> sy) {
	cnt.clear();
	for (int i = 1; i < N + 1; i++) for (int j = 1; j < M + 1; j++) {
		vector<int> cur;
		for (int k = 0; k < sx.size(); k++)
			cur.push_back(max(abs(sx[k] - i), abs(sy[k] - j)));
		cnt[cur]++;
	}
	f[0] = f[1] = 1;
	for (int i = 2; i < 50500; i++) f[i] = (f[i - 1] * i) % mod;
	ll ret = 1;
	for (auto it : cnt) ret = (ret * f[it.second]) % mod;
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxStones *obj;
	int answer;
	obj = new FoxStones();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	int p4;

	{
		// ----- test 0 -----
		p0 = 6;
		p1 = 1;
		int t2[] = { 3 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 1 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 2;
		p1 = 2;
		int t2[] = { 2 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 1 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 6;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 3;
		p1 = 3;
		int t2[] = { 1, 2, 3 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 1, 2, 3 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 8;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 12;
		p1 = 34;
		int t2[] = { 5, 6, 7, 8, 9, 10 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 11, 12, 13, 14, 15, 16 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 410850247;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
