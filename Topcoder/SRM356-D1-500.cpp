/*
	we can iterate over all subsets of men and women to create marriage
	this 2^24 state, now we check if given those marriages we will cover all men and women
*/

#include <vector>
#include <list>
#include <map>
#include <bits/stdc++.h>


#define all(v)           ((v).begin()), ((v).end())

using namespace std;


class MarriageProblemRevised {
public:
	int neededMarriages(vector <string> preferences);
};

int wo[32], me[32];

int f1[1 << 16], f2[1 << 16];
int c1[1 << 16], c2[1 << 16];

int MarriageProblemRevised::neededMarriages(vector <string> pr) {
	int n = pr.size(), m = pr[0].size();
	memset(wo, 0, sizeof(wo));
	memset(me, 0, sizeof(me));
	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++)  if (pr[i][j] == '1')
		me[i] |= 1 << j, wo[j] |= 1 << i;
	for (int i = 0; i < n; i++) if (!me[i]) return -1;
	for (int i = 0; i < m; i++) if (!wo[i]) return -1;
	for (int m1 = 0; m1 < (1 << n); m1++){
		f1[m1] = c1[m1] = 0;
		for (int i = 0; i < n; i++) if (m1&(1 << i))
			f1[m1] |= me[i], ++c1[m1];
	}
	for (int m1 = 0; m1 < (1 << m); m1++){
		f2[m1] = c2[m1] = 0;
		for (int i = 0; i < m; i++) if (m1&(1 << i))
			f2[m1] |= wo[i], ++c2[m1];
	}
	int ret = -1;
	for (int m1 = 0; m1 < (1 << n); m1++) for (int m2 = 0; m2 < (1 << m); m2++){
		if (c1[m1] + c2[m2] >= ret && ret != -1) continue;
		if ((f1[m1] & ((1 << m) - 1 - m2)) != ((1 << m) - 1 - m2)) continue;
		if ((f2[m2] & ((1 << n) - 1 - m1)) != ((1 << n) - 1 - m1)) continue;
		if (c1[m1] + c2[m2] < ret || ret == -1) ret = c1[m1] + c2[m2];
	}
	return ret;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MarriageProblemRevised *obj;
	int answer;
	obj = new MarriageProblemRevised();
	clock_t startTime = clock();
	answer = obj->neededMarriages(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
		// ----- test 0 -----
		string t0[] = { "0001", "0001", "0001", "1111" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "100", "010", "001" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 3;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "00", "00" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = -1;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "0001", "0001", "0001", "1111" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "11101011", "00011110", "11100100", "01010000", "01000010", "10100011", "01110110", "10111111" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 3;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
