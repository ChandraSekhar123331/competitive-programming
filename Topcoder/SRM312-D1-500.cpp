#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class AntarcticaPolice {
public:
	double minAverageCost(vector <int> costs, vector <string> roads);
};




const int maxn = 300500;

int dfsn[maxn], lowLink[maxn], inStack[maxn], comp[maxn], inDeg[maxn], vis[maxn];

vector<int> adj[maxn];
stack<int> st;
int ndfs, n, sc;

void targan(int u){
	dfsn[u] = lowLink[u] = ndfs++, inStack[u] = true, st.push(u);
	for (auto v : adj[u]){
		if (dfsn[v] == -1) {
			targan(v);
			lowLink[u] = min(lowLink[u], lowLink[v]);
		}
		else if (inStack[v]) // if a cycle 
			lowLink[u] = min(lowLink[u], dfsn[v]);
	}
	if (lowLink[u] == dfsn[u]) { // if this a root of a new component 
		int x = -1;
		while (x != u) {
			x = st.top();	st.pop();
			inStack[x] = false;
			comp[x] = sc;
		}
		sc++;
	}
}

double AntarcticaPolice::minAverageCost(vector <int> costs, vector <string> roads) {
	n = roads.size();
	for (int i = 0; i <= n; i++) adj[i].clear(), dfsn[i] = -1, inStack[i] = 0, inDeg[i] = 0, vis[i] = 0;
	ndfs = 0, sc = 0;
	for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) if (roads[i][j] == 'Y')
		adj[i].push_back(j);
	for (int i = 0; i < n; i++) if (dfsn[i] == -1)
		targan(i);
	for (int i = 0; i < n; i++)
		for (int j : adj[i])
			if (comp[i] != comp[j])
				inDeg[comp[j]]++;
	vector<int> mu;
	int tot = 0, cnt = 0;
	for (int c = 0; c < sc; c++) if (inDeg[c] == 0){
		int mi = 123456789, mii = 0;
		for (int i = 0; i < n; i++) if (comp[i] == c)
			if (costs[i] < mi)
				mi = costs[i], mii = i;
		tot += mi;
		cnt++;
		queue<int> q;
		for (int i = 0; i < n; i++) if (comp[i] == c)
			q.push(i), vis[i] = 1;
		while (!q.empty()){
			int u = q.front(); q.pop();
			if (u != mii) mu.push_back(costs[u]);
			for (int v : adj[u]) if (!vis[v])
				q.push(v), vis[v] = 1;
		}
	}
	sort(mu.begin(), mu.end());
	for (int i : mu)
		if (tot > cnt*i)	tot += i, cnt++;
	return double(tot) / double(cnt);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	AntarcticaPolice *obj;
	double answer;
	obj = new AntarcticaPolice();
	clock_t startTime = clock();
	answer = obj->minAverageCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <string> p1;
	double p2;

	{
		// ----- test 0 -----
		int t0[] = { 1, 99, 100 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "NNN", "NNN", "YYN" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 50.5;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
