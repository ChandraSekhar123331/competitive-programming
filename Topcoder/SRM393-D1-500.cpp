#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class NSegmentDisplay {
public:
	string brokenSegments(vector <string> symbols, vector <string> patterns);
};

vector<string> s, p;
int on[60];

bool check(){
	for (string cur : p){
		bool ok = 0;
		for (string po : s){
			bool f = 1;
			for (int i = 0; i < po.size(); i++) if (on[i] && po[i] != cur[i])
				f = 0;
			if (f){
				ok = 1; break;
			}
		}
		if (!ok) return 0;
	}
	return 1;
}

string NSegmentDisplay::brokenSegments(vector <string> symbols, vector <string> patterns) {
	s = symbols, p = patterns;
	for (int i = 0; i < 60; i++) on[i] = 0;
	for (auto cur : p) for (int i = 0; i < cur.size(); i++)
		if (cur[i] == '1')
			on[i] = 1;
	if (!check()) return "INCONSISTENT";
	string ret = "";
	for (int i = 0; i < s[0].size(); i++){
		if (on[i]) ret += 'Y';
		else{
			on[i] = 1;
			if (check()) ret += '?';
			else ret += 'N';
			on[i] = 0;
		}
	}
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NSegmentDisplay *obj;
	string answer;
	obj = new NSegmentDisplay();
	clock_t startTime = clock();
	answer = obj->brokenSegments(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"1011111","0000011","1110110","1110011","0101011","1111001","1111101","1000011","1111111","1111011"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"1011111"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Y?YYYYY";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1011111","0000011","1110110","1110011","0101011","1111001","1111101","1000011","1111111","1111011"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0111111"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "NYYYYYY";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"1011111","0000011","1110110","1110011","0101011","1111001","1111101","1000011","1111111","1111011"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"1000000","0010000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "INCONSISTENT";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"1011111","0000011","1110110","1110011","0101011","1111001","1111101","1000011","1111111","1111011"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0010110","0010010","0010000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "NNYNYYN";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"110000111001","100000101000","000001010000","101100010011","111111111101"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"010000000000","010000000000","000000000000","000000000000","000000000000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "NY?" "?" "?" "?NNN?" "?N";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"00000000001000000010","01010000001011101110","01010101110110011010","00111001111001000100","10010111010110110000","11011011001000110001"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"00011000010000000000","10010110010000100000","00010100010000001000","00010100010000001000","00010000000000101000","00000000000000000000","00010100010000001000","00011000010000000000","00011000010000000000","00000000000000000000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "YNNYYYYNNYNNNNYNYNN?";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"001000111101000","000001111011001","010010100100010","111000100010011","011011011010001","010011111101000","000101011110011","010000011111000","000001100100011","000000111110000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"001000110001000","000101110000011","000101010000011","001000110101000","010001100000111"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "INCONSISTENT";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
