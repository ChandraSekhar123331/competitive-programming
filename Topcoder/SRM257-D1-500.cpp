#include<bits/stdc++.h>
using namespace std;


class StockQuotes {
public:
	vector <string> report(vector <string> quotes);
};



vector <string> StockQuotes::report(vector <string> quotes) {
	vector<int> vi, vb, va;
	int bi = -1, as = 123456789;
	map<int, vector<pair<int, int>>> ma;

	for (auto s : quotes){
		int i, b, a;
		istringstream(s) >> i >> b >> a;
		vi.push_back(i); vb.push_back(b); va.push_back(a);
		ma[i].push_back({ b, a });
		int curb = -1, cura = 123456789;
		for (auto it : ma) if (it.first != 10) {
			curb = max(curb, it.second.back().first);
			cura = min(cura, it.second.back().second);
		}
		if (curb != bi || cura != as)
			ma[10].push_back({ curb, cura });
		bi = curb;	as = cura;
	}
	vector<string> ret;
	for (auto it : ma){
		double s = 0;
		for (auto i : it.second) s += i.second - i.first;
		s = s / double(it.second.size());
		ostringstream oss;
		oss << it.first << " " << it.second.size() << " " << setprecision(2) << fixed << round(s*100.) / 100;
		ret.push_back(oss.str());
	}
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	StockQuotes *obj;
	vector <string> answer;
	obj = new StockQuotes();
	clock_t startTime = clock();
	answer = obj->report(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		}
		else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;

	{
		// ----- test 0 -----
		string t0[] = { "0 10 14", "1 9 16", "2 11 15", "0 11 13", "1 10 15", "2 12 14", "0 9 15", "2 8 20" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "0 3 4.00", "1 2 6.00", "2 3 6.00", "10 6 2.83" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "8 931 944", "8 926 946", "8 926 951", "8 928 953", "8 929 954" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "8 5 21.60", "10 5 21.60" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "2 711 730", "5 716 729", "7 711 734", "0 718 731", "5 713 731", "1 713 730" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "0 1 13.00", "1 1 17.00", "2 1 19.00", "5 2 15.50", "7 1 23.00", "10 4 13.75" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
