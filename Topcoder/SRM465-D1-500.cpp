#include<bits/stdc++.h>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class GreenWarfare {
public:
	int minimumEnergyCost(vector <int> canonX, vector <int> canonY, vector <int> baseX, vector <int> baseY, vector <int> plantX, vector <int> plantY, int energySupplyRadius);
};



const int maxn = 100500;

int head[maxn], d[maxn], prv[maxn], record[maxn];

struct Node{
	int u, v, c;
	int nxt;
} edge[maxn];
int e;

void addEdge(int u, int v, int c){
	//forward edge
	edge[e].u = u, edge[e].v = v, edge[e].c = c;
	edge[e].nxt = head[u], head[u] = e++;
	//backward edge
	edge[e].u = v, edge[e].v = u, edge[e].c = 0;
	edge[e].nxt = head[v], head[v] = e++;
}

int maxflow(int s, int t){
	int flow = 0;
	while (true){
		memset(d, 0, sizeof(d));
		d[s] = 123456789;
		queue<int> q;
		q.push(s);
		while (!q.empty()){
			int u = q.front();	 q.pop();
			if (u == t) break;
			for (int i = head[u]; i != -1; i = edge[i].nxt)
				if (d[edge[i].v] == 0 && edge[i].c > 0){
				q.push(edge[i].v);
				d[edge[i].v] = min(d[u], edge[i].c);
				prv[edge[i].v] = u, record[edge[i].v] = i;
				}
		}
		if (d[t] == 0) break;
		flow += d[t];
		for (int u = t; u != s; u = prv[u]){
			int ed = record[u];
			edge[ed].c -= d[t];
			edge[ed ^ 1].c += d[t];
		}
	}
	return flow;
}


int base_cost[55], plant_cost[55];
int di(int dx, int dy){
	return dx*dx + dy*dy;
}

int GreenWarfare::minimumEnergyCost(vector <int> canonX, vector <int> canonY, vector <int> baseX, vector <int> baseY, vector <int> plantX, vector <int> plantY, int energySupplyRadius) {
	int c = canonX.size(), b = baseX.size(), p = plantX.size();
	e = 0;
	int s = b + p, t = s + 1;
	memset(base_cost, 63, sizeof(base_cost));
	memset(plant_cost, 63, sizeof(plant_cost));
	memset(head, -1, sizeof(head));
	for (int i = 0; i < c; i++){
		for (int j = 0; j < b; j++) base_cost[j] = min(base_cost[j], di(canonX[i] - baseX[j], canonY[i] - baseY[j]));
		for (int j = 0; j < p; j++) plant_cost[j] = min(plant_cost[j], di(canonX[i] - plantX[j], canonY[i] - plantY[j]));
	}
	for (int i = 0; i < b; i++) addEdge(s, i, base_cost[i]);
	for (int i = 0; i < p; i++) addEdge(i + b, t, plant_cost[i]);
	for (int i = 0; i < b; i++) for (int j = 0; j < p; j++) if (di(baseX[i] - plantX[j], baseY[i] - plantY[j]) <= energySupplyRadius*energySupplyRadius)
		addEdge(i, j + b, 123456789);
	return maxflow(s, t);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, vector <int> p5, int p6, bool hasAnswer, int p7) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p5.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p5[i];
	}
	cout << "}" << "," << p6;
	cout << "]" << endl;
	GreenWarfare *obj;
	int answer;
	obj = new GreenWarfare();
	clock_t startTime = clock();
	answer = obj->minimumEnergyCost(p0, p1, p2, p3, p4, p5, p6);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p7 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p7;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	vector <int> p5;
	int p6;
	int p7;

	{
		// ----- test 0 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 1, 2, 3 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 0, 0, 0 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		int t4[] = { 3 };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		int t5[] = { 3 };
		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
		p6 = 4;
		p7 = 14;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 1, 2, 3 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 0, 0, 0 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		int t4[] = { 2 };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		int t5[] = { 2 };
		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
		p6 = 4;
		p7 = 8;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 3, 6 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 3, 6 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 1, 2, 3, 4, 5 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 5, 4, 2, 3, 1 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		int t4[] = { 1, 2, 5 };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		int t5[] = { 1, 2, 5 };
		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
		p6 = 5;
		p7 = 12;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { -10, -10, 10 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 10, -10, 0 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		int t4[] = { 10, 10, -10 };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		int t5[] = { 10, -10, 0 };
		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
		p6 = 10;
		p7 = 200;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 3 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 3 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		int t4[] = { 1, 2, 3 };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		int t5[] = { 0, 0, 0 };
		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
		p6 = 4;
		p7 = 14;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
