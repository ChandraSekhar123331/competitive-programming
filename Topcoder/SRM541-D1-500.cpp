/*
	think about applying the function recursively

	first we count overlapping substring wtih string S

	now each time we apply function, there's can be three types of adding,
	from left string overlapping with f(t-1) or middle or right

	counting those overlapping will give us answer easily

	last thing to notice, since k can be very large, we don't need this check
	after around 50 steps, because at those times, strings overlapped part will be same
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


typedef long long ll;

const ll mod = 1000000007;

class AkariDaisukiDiv1 {
public:
	int countF(string Waai, string Akari, string Daisuki, string S, string F, int k);
};

string st;
ll ln[300500];

string S, F;

char get(int t, ll pos){
	if (t == 0) {
		if (pos >= ll(S.size())) return '-';
		return S[int(pos)];
	}
	for (int i = 0; i < st.size(); i++) {
		char c = st[i];
		if (c == '*'){
			if (pos < ln[t - 1]) return get(t - 1, pos);
			pos -= ln[t - 1];
		}
		else if (pos == 0)
			return st[i];
		else
			--pos;
	}
	return '-';
}

int ovl(int t){
	vector<ll> ti;
	ll cur = 0;
	for (int i = 0; i < st.size(); i++) {
		char c = st[i];
		if (c == '*'){
			for (int l = 1; l < F.size() && l <= ln[t - 1]; l++)
				ti.push_back(cur + ln[t - 1] - l);
			cur += ln[t - 1];
		}
		else{
			ti.push_back(cur);
			++cur;
		}
	}
	int ret = 0;
	for (ll s : ti){
		bool f = 1;
		for (int i = 0; i < F.size(); i++){
			f &= get(t, s + i) == F[i];
			if (!f) break;
		}
		ret += f;
	}
	return ret;
}


int AkariDaisukiDiv1::countF(string w, string a, string d, string _S, string _F, int k) {
	S = _S;
	F = _F;
	st = w + "*" + a + "*" + d;
	ln[0] = S.size();
	for (int i = 1; i < 55; i++)
		ln[i] = 2 * ln[i - 1] + (st.size() - 2);
	ll ret = 0;
	for (int i = 0; i < S.size(); i++) if (int(i + F.size()) <= int(S.size())){
		//cout << S.substr(i, int(F.size())) << "\n";
		ret += S.substr(i, int(F.size())) == F;
	}
	int add = 0;
	for (int i = 1; i <= k; i++){
		if (i < 55) add = ovl(i);
		ret = (ret * 2LL + add) % mod;
	}
	return ret;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, string p3, string p4, int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"" << "," << "\"" << p3 << "\"" << "," << "\"" << p4 << "\"" << "," << p5;
	cout << "]" << endl;
	AkariDaisukiDiv1 *obj;
	int answer;
	obj = new AkariDaisukiDiv1();
	clock_t startTime = clock();
	answer = obj->countF(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	string p2;
	string p3;
	string p4;
	int p5;
	int p6;

	{
		// ----- test 0 -----
		p0 = "a";
		p1 = "b";
		p2 = "c";
		p3 = "x";
		p4 = "axb";
		p5 = 2;
		p6 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "a";
		p1 = "b";
		p2 = "c";
		p3 = "x";
		p4 = "abcdefghij";
		p5 = 1;
		p6 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "a";
		p1 = "a";
		p2 = "a";
		p3 = "b";
		p4 = "aba";
		p5 = 2;
		p6 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "a";
		p1 = "b";
		p2 = "c";
		p3 = "d";
		p4 = "baadbdcbadbdccccbaaaadbdcbadbdccbaadbdcba";
		p5 = 58;
		p6 = 191690599;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = "a";
		p1 = "x";
		p2 = "y";
		p3 = "b";
		p4 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab";
		p5 = 49;
		p6 = 1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = "waai";
		p1 = "akari";
		p2 = "daisuki";
		p3 = "usushio";
		p4 = "id";
		p5 = 10000000;
		p6 = 127859200;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 6 -----
		p0 = "vfsebgjfyfgerkqlr";
		p1 = "ezbiwls";
		p2 = "kjerx";
		p3 = "jbmjvaawoxycfndukrjfg";
		p4 = "bgjfyfgerkqlrvfsebgjfyfgerkqlrvfsebgjfyfgerkqlrvfs";
		p5 = 1575724;
		p6 = 483599313;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
