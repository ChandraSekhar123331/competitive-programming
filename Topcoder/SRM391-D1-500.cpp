/*
	notice that with each bomb we can open exactly one cycle

	so problem is just asking for how many permutation that have number of cycle <= m

	to find this number, it's easier to find how many permutation that have number of cycle = k
	as this just  Stirling Number of the First Kind
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;

class KeysInBoxes {
public:
	string getAllKeys(int N, int M);
};

ll f[32][32];
ll gcd(ll a, ll b){
	return b ? gcd(b, a%b) : a;
}


string KeysInBoxes::getAllKeys(int N, int M) {
	for (int i = 0; i <= N; i++)
		for (int j = 0; j <= N; j++)
			f[i][j] = 0;
	f[1][1] = 1;
	for (int i = 2; i <= N; i++)
		for (int j = 1; j <= i; j++)
			f[i][j] = f[i - 1][j - 1] + (i - 1) * f[i - 1][j];
	ll a = 0, b = 1;
	for (int i = 1; i <= M; i++) a += f[N][i];
	for (ll i = 2; i <= N; i++) b *= i;
	ll g = gcd(a, b);
	return to_string(a / g) + "/" + to_string(b / g);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	KeysInBoxes *obj;
	string answer;
	obj = new KeysInBoxes();
	clock_t startTime = clock();
	answer = obj->getAllKeys(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	string p2;

	{
		// ----- test 0 -----
		p0 = 2;
		p1 = 1;
		p2 = "1/2";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 2;
		p1 = 2;
		p2 = "1/1";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 3;
		p1 = 1;
		p2 = "1/3";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 3;
		p1 = 2;
		p2 = "5/6";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 4;
		p1 = 2;
		p2 = "17/24";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
