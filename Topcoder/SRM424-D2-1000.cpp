#include<bits/stdc++.h>
using namespace std;


class BestRoads {
public:
	vector <int> numberOfRoads(vector <string> roads, int M);
};



struct edge{
	int u, v;
	edge(int a = 0, int b = 0) : u(a), v(b) {}
	bool operator < (const edge & a) const {
		if (u != a.u) return u < a.u;
		return v < a.v;
	}
};

int pa[55];

int par(int x){
	return (pa[x] == x ? x : pa[x] = par(pa[x]));
}

int n, m;

vector <int> BestRoads::numberOfRoads(vector <string> roads, int M) {
	n = roads.size();
	vector<edge> ed;
	for (int i = 0; i < n; i++) pa[i] = i;
	m = 0;
	for (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++) {
		if (roads[i][j] == 'Y')
			ed.push_back({ i, j });
	}
	sort(ed.begin(), ed.end());
	vector<edge> ne, rem;
	int co = n;
	for (auto e : ed){
		int u = e.u, v = e.v;
		u = par(u), v = par(v);
		if (u != v){
			pa[v] = u;
			ne.push_back(e);
			co--;
		}
		else
			rem.push_back(e);
	}
	if (co != 1) return{};
	int nrem = 0;
	while (ne.size() < M && nrem < rem.size()){
		ne.push_back(rem[nrem++]);
	}
	if (ne.size() != M) return{};
	vector<int> de(n, 0);
	for (auto e : ne)
		de[e.u]++, de[e.v]++;
	return de;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	BestRoads *obj;
	vector <int> answer;
	obj = new BestRoads();
	clock_t startTime = clock();
	answer = obj->numberOfRoads(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		}
		else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	vector <int> p2;

	{
		// ----- test 0 -----
		string t0[] = { "NYYYY", "YNYYY", "YYNYY", "YYYNY", "YYYYN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 10;
		int t2[] = { 4, 4, 4, 4, 4 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "NYY", "YNY", "YYN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2;
		int t2[] = { 2, 1, 1 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "NYNNY", "YNNNY", "NNNNN", "NNNNY", "YYNYN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4;
		p2.clear() /*{}*/;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "NYYNYYYN", "YNNNNYYN", "YNNNYNNN", "NNNNNNYY", "YNYNNNNN", "YYNNNNYY", "YYNYNYNY", "NNNYNYYN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 10;
		int t2[] = { 5, 3, 2, 2, 2, 2, 3, 1 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "NNYY", "NNYY", "YYNN", "YYNN" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 5;
		p2.clear() /*{}*/;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
