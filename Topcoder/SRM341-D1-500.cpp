#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;





#include <iostream> 
#include <sstream> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <memory> 
#include <cctype> 
#include <string> 
#include <vector> 
#include <list> 
#include <queue> 
#include <deque> 
#include <stack> 
#include <map> 
#include <set> 
#include <algorithm> 
using namespace std;






class LandAndSea {
public:
	vector <int> howManyIslands(vector <string> seaMap);
};

int n, m;
vector <string> a;
bool vis[55][55];



int di[] = { 0, 0, 1, -1, 1, 1, -1, -1 };
int dj[] = { 1, -1, 0, 0, 1, -1, 1, -1 };



void dfs(int i, int j, queue<int> &q){
	vis[i][j] = 1;
	int kfi = a[i][j] == '.' ? 4 : 8;
	for (int k = 0; k < kfi; k++){
		int vi = i + di[k];
		int vj = j + dj[k];
		if (vi < 0 || vj < 0 || vi >= n || vj >= m || vis[vi][vj]) continue;
		if (a[vi][vj] == a[i][j]) dfs(vi, vj, q);
		else q.push(vi), q.push(vj);
	}
}

vector<int> res;

int rec(int i, int j){
	queue<int> q;
	dfs(i, j, q);
	int ret = -1;
	while (!q.empty()){
		int ni = q.front(); q.pop();
		int nj = q.front(); q.pop();
		if (!vis[ni][nj])
			ret = max(ret, rec(ni, nj));
	}
	if (a[i][j] == 'x'){
		ret++;
		while (res.size() <= ret) res.push_back(0);
		res[ret]++;
	}
	return ret;
}

vector <int> LandAndSea::howManyIslands(vector <string> seaMap) {
	a = seaMap;
	for (int i = 0; i < a.size(); i++) a[i] = "." + a[i] + ".";
	a.insert(a.begin(), string(a[0].size(), '.'));
	a.push_back(a[0]);
	n = a.size(), m = a[0].size();
	res.clear();
	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) vis[i][j] = 0;
	rec(0, 0);
	return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	LandAndSea *obj;
	vector <int> answer;
	obj = new LandAndSea();
	clock_t startTime = clock();
	answer = obj->howManyIslands(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		}
		else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <int> p1;

	{
		// ----- test 0 -----
		string t0[] = { "x" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "xxxxx", "x...x", "x.x.x", "x...x", "xxxxx" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "xxxxx", "x...x", "x.x.x", "x...x", "xxxxx", "xxxxx", "x...x", "x.x.x", "x...x", "xxxxx" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 2, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "..", ".." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1.clear() /*{}*/;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "............", ".......xxxx.", "..xxx.x...x.", "..x..x..x.x.", "..x.x.x...x.", "..xx...xxx.." };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = { "xxxxxxxxxxxxxxxx", "x..............x", "x..xxxxxxxxxxx.x", "x..x.........x.x", "x..x.xxxxxxx.x.x", "x..x.x.....x.x.x", "x..x.x..x..x.x.x", "x..x.x.....x.x.x", "x..x.xxxxxxx.x.x", "x..x.........x.x", "x..xxxxxxxxxxx.x", "x..............x", "xxxxxxxxxxxxxxxx" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 1, 1, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 6 -----
		string t0[] = { "xxxxxxxxxx", ".xxxxxxx.x", ".x.......x", ".x.xxxxx.x", ".x.....x.x", ".x..x..x.x", ".x.....x.x", ".xxxxxxx.x" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 2 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
