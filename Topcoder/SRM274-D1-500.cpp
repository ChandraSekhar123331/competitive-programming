#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class DyckwordUniformer {
public:
	string uniform(string dyckword);
};



string DyckwordUniformer::uniform(string ds) {
	int xs = 0, ys = 0;
	for (int i = 0; i < ds.size(); i++){
		xs += ds[i] == 'X';
		ys += ds[i] == 'Y';
		if (ys > xs) return "";
	}
	if (xs != ys) return "";
	while (true){
		bool f = 0;
		for (int s = 0; s + 1 < ds.size(); s++){
			int i = s;
			xs = ys = 0;
			while (i < ds.size() && (xs != ys || xs + ys == 0)){
				xs += ds[i] == 'X';
				ys += ds[i] == 'Y';
				if (ys > xs){
					i = ds.size(); break;
				}
				i++;
				if (xs == ys)
					break;
			}
			if (i == ds.size()) continue;
			int j = i;
			xs = ys = 0;
			while (j < ds.size() && (xs != ys || xs + ys == 0)){
				xs += ds[j] == 'X';
				ys += ds[j] == 'Y';
				if (ys > xs){
					j = ds.size(); break;
				}
				j++;
				if (xs == ys)
					break;
			}
			if (j == ds.size() && (xs != ys || xs + ys == 0)) continue;
			string t1 = "", t2 = "";
			for (int k = i; k < j; k++) t1 += ds[k];
			for (int k = s; k < i; k++) t2 += ds[k];
			if (t2 <= t1) continue;
			string ne = "";
			for (int k = 0; k < s; k++) ne += ds[k];
			for (int k = i; k < j; k++) ne += ds[k];
			for (int k = s; k < i; k++) ne += ds[k];
			for (int k = j; k < ds.size(); k++) ne += ds[k];
			ds = ne;
			f = 1;
			break;
		}
		if (!f) break;
	}
	return ds;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	DyckwordUniformer *obj;
	string answer;
	obj = new DyckwordUniformer();
	clock_t startTime = clock();
	answer = obj->uniform(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "XXYXXYYY";
	p1 = "XXXYYXYY";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "XYXYXXXYYYXXYY";
	p1 = "XXXYYYXXYYXYXY";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "XXXYYYXXYXXXYYYY";
	p1 = "XXXXYYYXYYXXXYYY";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "XXYYYX";
	p1 = "";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
