#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
typedef  long long ll;


class ConstructBST {
public:
	long long numInputs(vector <int> tree);
};

ll nCk(ll n, ll k)
{
	if (k > n) return 0;
	if (k * 2 > n) k = n - k;
	if (k == 0) return 1;

	ll result = n;
	for (int i = 2; i <= k; ++i) {
		result *= (n - i + 1);
		result /= i;
	}
	return result;
}

vector<int> getSubtree(int u, vector<int> &v){
	queue<int> q;
	q.push(u);
	vector<int> ret;
	while (!q.empty()){
		u = q.front();	q.pop();
		ret.push_back(u);
		if (find(v.begin(), v.end(), u * 2) != v.end())
			q.push(u * 2);
		if (find(v.begin(), v.end(), u * 2 + 1) != v.end())
			q.push(u * 2 + 1);
	}
	return ret;
}

long long ConstructBST::numInputs(vector <int> v) {
	if (v.size() <= 1) return 1LL;
	sort(v.begin(), v.end());
	vector <int> l, r;
	if (find(v.begin(), v.end(), v[0] * 2) != v.end())
		l = getSubtree(v[0] * 2, v);
	if (find(v.begin(), v.end(), v[0] * 2 + 1) != v.end())
		r = getSubtree(v[0] * 2 + 1, v);
	return nCk(v.size() - 1, l.size())*numInputs(l)*numInputs(r);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	ConstructBST *obj;
	long long answer;
	obj = new ConstructBST();
	clock_t startTime = clock();
	answer = obj->numInputs(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	long long p1;

	{
		// ----- test 0 -----
		int t0[] = { 1, 2 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1ll;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 1, 3, 6 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1ll;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 1, 2, 5, 3, 4 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 8ll;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 1, 2, 4, 6, 3 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6ll;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { 2, 4, 3, 62, 7, 15, 1, 31, 5, 14, 28, 57, 56, 114 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 96096ll;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
