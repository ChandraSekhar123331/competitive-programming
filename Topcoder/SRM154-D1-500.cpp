#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ContestScore {
public:
	vector <string> sortResults(vector <string> data);
};

struct te{
	string na;
	int sr, ss;

	bool operator < (const te&a) const {
		if (sr != a.sr) return sr < a.sr;
		if (ss != a.ss) return ss > a.ss;
		return na < a.na;
	}
} team[55];

int n;


vector<int> sc[55];

vector <string> ContestScore::sortResults(vector <string> data) {
	n = data.size(); int nsc = 0;
	for (int i = 0; i < 55; i++) sc[i].clear();
	for (int i = 0; i < n; i++){
		istringstream iss(data[i]);
		iss >> team[i].na;
		team[i].ss = 0;
		team[i].sr = 0;
		int cnt = 0;
		double t;
		while (iss >> t){
			int tt = t*10.;
			team[i].ss += tt;
			sc[cnt++].push_back(tt);
		}
		nsc = cnt;
	}
	for (int i = 0; i < nsc; i++){
		vector<int> per;
		for (int j = 0; j < n; j++) per.push_back(j);
		for (int j = 0; j < n; j++) for (int k = j + 1; k < n; k++)
			if (sc[i][j] < sc[i][k])
				swap(sc[i][j], sc[i][k]), swap(per[j], per[k]);
		vector<int> rr;
		rr.push_back(1);
		for (int j = 1; j < n; j++)
			if (sc[i][j] == sc[i][j - 1])
				rr.push_back(rr[j - 1]);
			else
				rr.push_back(j + 1);
		for (int j = 0; j < n; j++) team[per[j]].sr += rr[j];
	}
	sort(team, team + n);
	vector<string> ret;
	for (int i = 0; i < n; i++){
		ostringstream oss;
		double ss = team[i].ss / 10.;
		oss.precision(1);
		oss << team[i].na << " " << team[i].sr << " " << fixed << ss;
		ret.push_back(oss.str());
	}
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ContestScore *obj;
	vector <string> answer;
	obj = new ContestScore();
	clock_t startTime = clock();
	answer = obj->sortResults(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		}
		else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;

	{
		// ----- test 0 -----
		string t0[] = { "CROATIA 91.3 81.3 82.4 89.2 90.1 94.3 81.9 86.2", "HUNGARY 82.7 86.2 89.0 88.9 86.3 87.6 87.0 79.0", "SWEDEN 96.8 83.7 80.1 79.5 97.0 91.8 83.9 87.0", "CHINA 96.2 82.8 76.0 82.3 86.6 75.6 98.6 76.1", "NORWAY 90.4 96.0 83.8 89.0 99.6 79.3 77.2 96.5", "POLAND 87.7 84.0 96.2 99.1 86.7 80.6 76.0 77.0", "UKRAINE 90.5 82.2 98.8 99.8 98.5 77.3 94.5 99.7", "GERMANY 99.5 95.3 75.6 78.9 91.6 94.9 86.2 80.4", "FRANCE 95.1 97.7 83.2 88.9 75.8 80.9 89.4 78.0", "AUSTRALIA 90.7 84.0 90.2 75.9 94.4 96.8 91.7 82.8", "DENMARK 88.9 79.4 76.3 75.3 81.8 97.1 84.1 83.6", "SINGAPORE 94.9 87.4 78.6 90.1 81.4 80.1 85.1 83.5", "NETHERLAND 91.9 93.8 77.5 93.6 98.6 77.3 85.0 80.9", "RUSSIANFED 75.8 88.2 77.2 76.0 88.2 81.0 93.5 97.1", "NEWZEALAND 75.9 98.8 83.3 83.4 78.5 87.0 93.9 93.7", "IRELAND 82.9 92.6 83.5 93.0 99.0 92.8 87.2 98.3", "MEXICO 76.2 88.9 89.8 88.8 81.5 79.1 90.2 88.4", "VENEZUELA 78.3 79.5 99.9 77.0 93.1 89.8 81.1 91.8", "IRAN 85.4 89.1 75.6 89.0 78.0 78.8 90.4 85.8", "BULGARIA 95.6 99.0 84.2 92.8 94.3 81.1 95.1 8"
			"0.0", "ROMANIA 78.9 77.2 97.4 82.1 83.4 90.1 99.5 90.0", "CANADA 88.6 87.9 89.4 97.5 87.8 83.4 75.8 83.7", "BRAZIL 80.8 79.7 77.2 99.1 96.1 82.9 88.3 88.7", "UNITEDKING 85.3 96.9 82.8 83.7 93.5 96.5 76.9 96.4", "UNITEDSTAT 89.3 81.4 87.3 99.6 95.7 79.0 77.6 84.1", "SPAIN 93.8 87.8 98.9 92.2 85.2 84.9 92.3 91.4", "MALAYSIA 81.7 96.5 77.4 78.7 76.8 82.6 98.9 90.7", "INDIA 96.2 91.6 96.7 85.9 94.9 89.4 75.3 91.2", "PORTUGAL 77.6 75.7 82.3 75.8 83.3 85.8 96.5 97.3", "COLOMBIA 75.5 83.2 96.0 76.5 88.3 75.7 95.9 93.3}" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "IRELAND 77 729.3", "UKRAINE 78 741.3", "BULGARIA 87 722.1", "SPAIN 89 726.5", "INDIA 94 721.2", "NORWAY 100 711.8", "UNITEDKING 106 712.0", "AUSTRALIA 110 706.5", "SWEDEN 115 699.8", "NEWZEALAND 119 694.5", "GERMANY 120 702.4", "NETHERLAND 120 698.6", "ROMANIA 122 698.6", "CROATIA 124 696.7", "CANADA 126 694.1", "UNITEDSTAT 128 694.0", "BRAZIL 128 692.8", "VENEZUELA 132 690.5", "FRANCE 132 689.0", "MALAYSIA 135 683.3", "HUNGARY 138 686.7", "POLAND 140 687.3", "COLOMBIA 141 684.4", "MEXICO 141 682.9", "RUSSIANFED 142 677.0", "SINGAPORE 144 681.1", "PORTUGAL 148 674.3", "IRAN 154 672.1", "CHINA 155 674.2", "DENMARK 167 666.5" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
