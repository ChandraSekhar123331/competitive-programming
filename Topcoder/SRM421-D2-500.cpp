#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class EquilibriumPoints {
public:
	vector <double> getPoints(vector <int> x, vector <int> m);
};

double sqr(double x){
	return x*x;
}

vector <double> EquilibriumPoints::getPoints(vector <int> x, vector <int> m) {
	int n = x.size();
	vector <double> ret;
	for (int i = 1; i < n; i++){
		double l = x[i - 1], r = x[i];
		for (int t = 0; t < 100000; t++){
			double mid = (l + r) / 2.;
			double sgl = 0., sgr = 0.;
			for (int j = 0; j < i; j++) sgl += m[j] / sqr(mid - x[j]);
			for (int j = i; j < n; j++) sgr += m[j] / sqr(x[j] - mid);
			if (sgl + 1e-15 > sgr) l = mid;
			else r = mid;
		}
		ret.push_back(l);
	}
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, vector <double> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	EquilibriumPoints *obj;
	vector <double> answer;
	obj = new EquilibriumPoints();
	clock_t startTime = clock();
	answer = obj->getPoints(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		}
		else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != answer[i] || fabs(p2[i] - answer[i]) > 1e-9 * max(1.0, fabs(p2[i]))) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <double> p2;

	{
		// ----- test 0 -----
		int t0[] = { 1, 2 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		double t2[] = { 1.5 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 1, 2 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 1000 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		double t2[] = { 1.0306534300317156 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 1, 2, 3 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, 2, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		double t2[] = { 1.4060952084922507, 2.5939047915077493 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 2, 3, 5, 7 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 3, 2, 7, 5 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		double t2[] = { 2.532859446114924, 3.7271944335152813, 6.099953640852538 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { 1, 999, 1000 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 2, 1, 1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		double t2[] = { 500.2496244371572, 999.5000000626878 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
