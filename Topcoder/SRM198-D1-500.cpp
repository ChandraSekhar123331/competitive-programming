#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<bits/stdc++.h>
using namespace std;


class DungeonEscape {
public:
	int exitTime(vector <string> up, vector <string> down, vector <string> east, vector <string> west, int startLevel, int startEasting);
};

int n, m;
int dp[51][51][3000];
vector <string> u, d, l, r;

int wa(int ir){
	if (ir < 0) return 123456789;
	return (n - ir)*m;
}

int rec(int i, int j, int ti){
	if (i < 0) return 0;
	if (i >= n || j >= m || j < 0) return 12345678;
	int &ret = dp[i][j][ti];
	if (ret != -1) return ret;
	ret = 12345678;
	if (u[i][j] != 'x' && ti + (u[i][j] - '0') < wa(i - 1)) ret = min(ret, rec(i - 1, j, ti + (u[i][j] - '0')) + (u[i][j] - '0'));
	if (d[i][j] != 'x' && ti + (d[i][j] - '0') < wa(i + 1)) ret = min(ret, rec(i + 1, j, ti + (d[i][j] - '0')) + (d[i][j] - '0'));
	if (r[i][j] != 'x' && ti + (r[i][j] - '0') < wa(i)) ret = min(ret, rec(i, j + 1, ti + (r[i][j] - '0')) + (r[i][j] - '0'));
	if (l[i][j] != 'x' && ti + (l[i][j] - '0') < wa(i)) ret = min(ret, rec(i, j - 1, ti + (l[i][j] - '0')) + (l[i][j] - '0'));
	return ret;
}


int DungeonEscape::exitTime(vector <string> up, vector <string> down, vector <string> east, vector <string> west, int startLevel, int startEasting) {
	u = up, d = down, r = east, l = west;
	n = up.size(), m = d[0].size();
	memset(dp, -1, sizeof(dp));
	int ret = rec(startLevel, startEasting, 0);
	return ret == 12345678 ? -1 : ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, vector <string> p3, int p4, int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p3[i] << "\"";
	}
	cout << "}" << "," << p4 << "," << p5;
	cout << "]" << endl;
	DungeonEscape *obj;
	int answer;
	obj = new DungeonEscape();
	clock_t startTime = clock();
	answer = obj->exitTime(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	vector <string> p3;
	int p4;
	int p5;
	int p6;

	{
		// ----- test 0 -----
		string t0[] = { "0x4", "0x3", "0x3" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "0x9", "009", "0x9" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "0x9", "1x9", "009" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		string t3[] = { "0x9", "0x0", "009" };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 2;
		p5 = 2;
		p6 = 10;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "xxxxxxxxx1", "1xxxxxxxxx", "xxxxxxxxx1" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "xxxxxxxxxx", "xxxxxxxxxx", "xxxxxxxxxx" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "1111111111", "xxxxxxxxxx", "1111111111" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		string t3[] = { "xxxxxxxxxx", "1111111111", "xxxxxxxxxx" };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 2;
		p5 = 0;
		p6 = 30;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "xxxxxxxxx1", "xxxx999991", "x999999991" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "1111111111", "1111111111", "1111111111" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "1111122242", "2222222241", "2111111111" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		string t3[] = { "xxxxxxxxx1", "1111111111", "xxxxxxxxx1" };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 2;
		p5 = 0;
		p6 = -1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "1x2x3x4x5x6x7x8x9", "00000000000000000", "98765432223456789", "12345678987654321" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = { "00000000000000000", "00000000000000000", "00000000000000000", "00000000000000000" };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = { "xxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx", "22222222222222222", "33333333333333333" };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		string t3[] = { "xxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx", "22222222222222222", "33333333333333333" };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 3;
		p5 = 12;
		p6 = 17;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
