#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SentenceSplitting {
public:
	int split(string sentence, int K);
};

string st;
int n, k;

bool can(int mx){
	int i = 0, lastSpace = -1, cuts = 0;
	string cur;
	while (1){
		int j = i;
		for (; j < n && j - i <= mx; j++) if (st[j] == ' '){
			lastSpace = j;
		}
		if (j == n){
			if (j - i <= mx) return cuts <= k;
			if (lastSpace == -1) return 0;
			return cuts + 1 <= k;
		}
		if (lastSpace == -1) return 0;
		i = lastSpace + 1;
		cuts++;
		lastSpace = -1;
	}
	if (cuts > k) return 0;
	return 1;
}


int SentenceSplitting::split(string sentence, int K) {
	st = sentence;
	n = st.size();
	k = K;
	for (int i = 1;; i++) if (can(i))
		return i;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	SentenceSplitting *obj;
	int answer;
	obj = new SentenceSplitting();
	clock_t startTime = clock();
	answer = obj->split(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = "This is a test sentence";
		p1 = 1;
		p2 = 13;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "TheOnlyWord";
		p1 = 37;
		p2 = 11;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "One veeeeeeeeeeeeeeeeeeery long word";
		p1 = 2;
		p2 = 22;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "Each tournament round is an elimination round";
		p1 = 3;
		p2 = 15;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
