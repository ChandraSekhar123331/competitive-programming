#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


int adjMax[55][55];
int vis[55], colAssign[55], rowAssign[55];

int rows, cols;

bool canMatch(int i) // O(E)
{
	for (int j = 0; j<cols; ++j) if (adjMax[i][j] && !vis[j]) {
		vis[j] = 1;
		if (colAssign[j] < 0 || canMatch(colAssign[j])) {
			colAssign[j] = i, rowAssign[i] = j;
			return true;
		}
	}
	return false;
}


int bipartiteMatching()	// O(EV)
{	// In case spares graph, use adjList
	int maxFlow = 0;
	for (int i = 0; i<rows; ++i) {
		for (int j = 0; j < 55; j++) vis[j] = 0;
		if (canMatch(i))
			maxFlow++;
	}
	return maxFlow;
}


class PointyWizardHats {
public:
	int getNumHats(vector <int> topHeight, vector <int> topRadius, vector <int> bottomHeight, vector <int> bottomRadius);
};

bool can(int r, int h, int r1, int h1){
	return (r>r1) && ((h1*r) > (h*r1));
}

int PointyWizardHats::getNumHats(vector <int> topHeight, vector <int> topRadius, vector <int> bottomHeight, vector <int> bottomRadius) {
	rows = topHeight.size();
	cols = bottomHeight.size();
	for (int i = 0; i < 55; i++) {
		colAssign[i] = rowAssign[i] = -1;
		for (int j = 0; j < 55; j++)	adjMax[i][j] = 0;
	}
	for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++)
		if (can(bottomRadius[j], bottomHeight[j], topRadius[i], topHeight[i]))
			adjMax[i][j] = 1;
	return bipartiteMatching();
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	PointyWizardHats *obj;
	int answer;
	obj = new PointyWizardHats();
	clock_t startTime = clock();
	answer = obj->getNumHats(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;

	{
		// ----- test 0 -----
		int t0[] = { 30 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 3 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 3 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 30 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 4, 4 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 4, 3 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 5, 12 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 5, 4 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 3 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 3 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 1, 1 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 2, 4 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 10, 10 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 2, 5 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 2, 9 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 3, 6 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 2;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { 3, 4, 5 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 5, 4, 3 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 3, 4, 5 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 3, 8, 5 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 2;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		int t0[] = { 1, 2, 3, 4, 5 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 2, 3, 4, 5, 6 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 2, 3, 4, 5, 6 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 1, 2, 3, 4, 5 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 0;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 6 -----
		int t0[] = { 123, 214, 232, 323, 342, 343 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 123, 123, 232, 123, 323, 434 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 545, 322, 123, 545, 777, 999 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 323, 443, 123, 656, 767, 888 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 5;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 7 -----
		int t0[] = { 999, 999, 999, 10000, 10000, 10000 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 10000, 10000, 10000, 1, 2, 3 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 2324, 2323, 234, 5454, 323, 232 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = { 1, 2, 3222, 434, 5454, 23 };
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 3;
		all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
