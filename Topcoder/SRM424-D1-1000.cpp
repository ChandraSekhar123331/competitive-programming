#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;


class ProductOfPrices {
public:
	int product(int N, int L, int X0, int A, int B);
};







const int maxn = 200500;
ll cnt[maxn], sum[maxn];

void update(ll T[], int idx, ll val){
	for (; idx<maxn; idx |= (idx + 1))
		T[idx] += val;
}


ll query(ll T[], int idx){
	ll sum = 0;
	for (; idx >= 0; idx = (idx & (idx + 1)) - 1) sum += T[idx];
	return sum;
}

ll x[maxn];

const ll mod = 1000000007LL;

int ProductOfPrices::product(int N, int _L, int _X0, int _A, int _B) {
	ll L = _L, X0 = _X0, A = _A, B = _B;
	for (int i = 0; i < maxn; i++) cnt[i] = 0, sum[i] = 0;
	x[0] = X0%L;
	for (int i = 1; i < N; i++)
		x[i] = (x[i - 1] * A + B) % L;
	update(cnt, x[0], 1);
	update(sum, x[0], x[0]);
	ll ret = 1;
	for (int i = 1; i < N; i++){
		ll cntl = query(cnt, x[i]), cntr = query(cnt, maxn - 1) - cntl;
		ll suml = query(sum, x[i]), sumr = query(sum, maxn - 1) - suml;
		ll su = (cntl*x[i] - suml + mod) % mod;
		su = (su + (sumr - cntr*x[i]) + mod) % mod;
		ret = (ret*su) % mod;
		update(cnt, x[i], 1);
		update(sum, x[i], x[i]);
	}
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	ProductOfPrices *obj;
	int answer;
	obj = new ProductOfPrices();
	clock_t startTime = clock();
	answer = obj->product(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;

	{
		// ----- test 0 -----
		p0 = 5;
		p1 = 10;
		p2 = 3;
		p3 = 1;
		p4 = 1;
		p5 = 180;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 3;
		p1 = 20;
		p2 = 5;
		p3 = 2;
		p4 = 3;
		p5 = 64;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 4;
		p1 = 21;
		p2 = 1;
		p3 = 7;
		p4 = 1;
		p5 = 3087;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 10;
		p1 = 100;
		p2 = 4;
		p3 = 37;
		p4 = 11;
		p5 = 591860767;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 5;
		p1 = 200000;
		p2 = 999999999;
		p3 = 123456789;
		p4 = 987654321;
		p5 = 499739175;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = 11092;
		p1 = 17597;
		p2 = 17395;
		p3 = 10850;
		p4 = 9477;
		p5 = 26934147;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
